####################################################
# DVrouter.py
# Name:
# HUID:
#####################################################

from router import Router
from packet import Packet
import json

class DVrouter(Router):
    """Distance vector routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeat_time = heartbeat_time
        self.last_time = 0
        # TODO
        #   add your own class fields and initialization code here
        
        # Key: dst_addr ,Value: (cost, port)
        self.routing_table = {}
        pass

    def convert_json_to_routing_table(self, json_dv):
        return json.loads(json_dv)

    def broadcast(self, sender_router_addr):
        for port, link in self.links.items():  
            if link.e1 != self.addr:
                router_addr = link.e1
            else:
                router_addr = link.e2
            if not router_addr.isupper() or router_addr == sender_router_addr:
                continue
            packet = Packet(Packet.ROUTING, self.addr, router_addr, json.dumps(self.routing_table))
            self.send(port, packet)

    def config_routing_table(self, packet):
        neighbor_DV = self.convert_json_to_routing_table(packet.content)
        DV_router_addr = packet.src_addr
        updated = False
        base_dist = self.routing_table[DV_router_addr][0]        
        for router_addr, link in neighbor_DV.items():
            if (router_addr == self.addr):
                continue
            new_cost = link[0] + base_dist
            if (router_addr not in self.routing_table or new_cost < self.routing_table[router_addr][0]):
                self.routing_table[router_addr] = (new_cost, self.routing_table[DV_router_addr][1])
                updated = True
        if updated:
            self.broadcast(DV_router_addr)
        return
    
    def handle_packet(self, port, packet):
        """Process incoming packet."""
        # TODO
        if packet.is_traceroute:
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dst_addr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            if (packet.dst_addr in self.routing_table):
                self.send(self.routing_table[packet.dst_addr][1], packet)
            pass
        else:
            # Hint: this is a routing packet generated by your routing protocol
            # If the received distance vector is different
            #   update the local copy of the distance vector
            #   update the distance vector of this router
            #   update the forwarding table
            #   broadcast the distance vector of this router to neighbors
            self.config_routing_table(packet)
            pass

    def handle_new_link(self, port, endpoint, cost):
        """Handle new link."""
        # TODO
        #   update the distance vector of this router
        #   update the forwarding table
        #   broadcast the distance vector of this router to neighbors
        self.routing_table[endpoint] = (cost, port)
        self.broadcast(None)
        pass

    def handle_remove_link(self, port):
        """Handle removed link."""
        # TODO
        #   update the distance vector of this router
        #   update the forwarding table
        #   broadcast the distance vector of this router to neighbors
        pass

    def handle_time(self, time_ms):
        """Handle current time."""
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            # TODO
            #   broadcast the distance vector of this router to neighbors
            self.broadcast(None)
            pass

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"Routing Table={self.routing_table})"
